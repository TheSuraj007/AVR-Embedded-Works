
Uart_AVR.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000009e  00800100  00000336  000003ca  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000336  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000036  0080019e  0080019e  00000468  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000468  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000498  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000050  00000000  00000000  000004d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000b49  00000000  00000000  00000528  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007c8  00000000  00000000  00001071  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000429  00000000  00000000  00001839  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000f0  00000000  00000000  00001c64  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000049d  00000000  00000000  00001d54  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000026d  00000000  00000000  000021f1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000040  00000000  00000000  0000245e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__vector_18>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e6 e3       	ldi	r30, 0x36	; 54
  7c:	f3 e0       	ldi	r31, 0x03	; 3
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ae 39       	cpi	r26, 0x9E	; 158
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	ae e9       	ldi	r26, 0x9E	; 158
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a4 3d       	cpi	r26, 0xD4	; 212
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 0d 01 	call	0x21a	; 0x21a <main>
  9e:	0c 94 99 01 	jmp	0x332	; 0x332 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <_Z9uart_initv>:
void uart_write_text(char *str);

// expected uart value, 9600
void uart_init()
{
	UBRR0=103;
  a6:	87 e6       	ldi	r24, 0x67	; 103
  a8:	90 e0       	ldi	r25, 0x00	; 0
  aa:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
  ae:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
	Asynchronous mode
	No Parity
	1 StopBit
	char size 8
	*/
	UCSR0C=(3<<UCSZ00);
  b2:	86 e0       	ldi	r24, 0x06	; 6
  b4:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
	UDRIE- Data register empty

	Enable The receiver and transmitter

	*/
	UCSR0B=(1<<RXCIE0)|(1<<RXEN0)|(1<<TXEN0);
  b8:	88 e9       	ldi	r24, 0x98	; 152
  ba:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
	//UCSRB=(1<<RXCIE)|(1<<RXEN)|(1<<TXEN);
	
	DDRB = 0xff;
  be:	8f ef       	ldi	r24, 0xFF	; 255
  c0:	84 b9       	out	0x04, r24	; 4
	
	sei();
  c2:	78 94       	sei
  c4:	08 95       	ret

000000c6 <_Z14uart_read_textPc>:
	
}

char uart_read_text(char *data_send)
{
	if (flag == false)
  c6:	20 91 3d 01 	lds	r18, 0x013D	; 0x80013d <flag>
  ca:	21 11       	cpse	r18, r1
  cc:	4a c0       	rjmp	.+148    	; 0x162 <_Z14uart_read_textPc+0x9c>
	{		
		for (k=0; k <= i; k++)
  ce:	10 92 9f 01 	sts	0x019F, r1	; 0x80019f <__data_end+0x1>
  d2:	10 92 9e 01 	sts	0x019E, r1	; 0x80019e <__data_end>
  d6:	20 91 9e 01 	lds	r18, 0x019E	; 0x80019e <__data_end>
  da:	30 91 9f 01 	lds	r19, 0x019F	; 0x80019f <__data_end+0x1>
  de:	40 91 a0 01 	lds	r20, 0x01A0	; 0x8001a0 <i>
  e2:	50 91 a1 01 	lds	r21, 0x01A1	; 0x8001a1 <i+0x1>
  e6:	42 17       	cp	r20, r18
  e8:	53 07       	cpc	r21, r19
  ea:	dc f1       	brlt	.+118    	; 0x162 <_Z14uart_read_textPc+0x9c>
		{
			data_send[k] = Buff[k];
  ec:	fc 01       	movw	r30, r24
  ee:	e2 0f       	add	r30, r18
  f0:	f3 1f       	adc	r31, r19
  f2:	d9 01       	movw	r26, r18
  f4:	ae 55       	subi	r26, 0x5E	; 94
  f6:	be 4f       	sbci	r27, 0xFE	; 254
  f8:	2c 91       	ld	r18, X
  fa:	20 83       	st	Z, r18
			if (k == i)
  fc:	20 91 9e 01 	lds	r18, 0x019E	; 0x80019e <__data_end>
 100:	30 91 9f 01 	lds	r19, 0x019F	; 0x80019f <__data_end+0x1>
 104:	40 91 a0 01 	lds	r20, 0x01A0	; 0x8001a0 <i>
 108:	50 91 a1 01 	lds	r21, 0x01A1	; 0x8001a1 <i+0x1>
 10c:	24 17       	cp	r18, r20
 10e:	35 07       	cpc	r19, r21
 110:	e9 f4       	brne	.+58     	; 0x14c <_Z14uart_read_textPc+0x86>
			{
				for (k=0; k <= i; k++)
 112:	10 92 9f 01 	sts	0x019F, r1	; 0x80019f <__data_end+0x1>
 116:	10 92 9e 01 	sts	0x019E, r1	; 0x80019e <__data_end>
 11a:	20 91 9e 01 	lds	r18, 0x019E	; 0x80019e <__data_end>
 11e:	30 91 9f 01 	lds	r19, 0x019F	; 0x80019f <__data_end+0x1>
 122:	42 17       	cp	r20, r18
 124:	53 07       	cpc	r21, r19
 126:	5c f0       	brlt	.+22     	; 0x13e <_Z14uart_read_textPc+0x78>
				{
					Buff[k] = 0;
 128:	f9 01       	movw	r30, r18
 12a:	ee 55       	subi	r30, 0x5E	; 94
 12c:	fe 4f       	sbci	r31, 0xFE	; 254
 12e:	10 82       	st	Z, r1
		for (k=0; k <= i; k++)
		{
			data_send[k] = Buff[k];
			if (k == i)
			{
				for (k=0; k <= i; k++)
 130:	2f 5f       	subi	r18, 0xFF	; 255
 132:	3f 4f       	sbci	r19, 0xFF	; 255
 134:	30 93 9f 01 	sts	0x019F, r19	; 0x80019f <__data_end+0x1>
 138:	20 93 9e 01 	sts	0x019E, r18	; 0x80019e <__data_end>
 13c:	ee cf       	rjmp	.-36     	; 0x11a <_Z14uart_read_textPc+0x54>
				{
					Buff[k] = 0;
					
				}
				flag = true;
 13e:	21 e0       	ldi	r18, 0x01	; 1
 140:	20 93 3d 01 	sts	0x013D, r18	; 0x80013d <flag>
				i = 0;
 144:	10 92 a1 01 	sts	0x01A1, r1	; 0x8001a1 <i+0x1>
 148:	10 92 a0 01 	sts	0x01A0, r1	; 0x8001a0 <i>

char uart_read_text(char *data_send)
{
	if (flag == false)
	{		
		for (k=0; k <= i; k++)
 14c:	20 91 9e 01 	lds	r18, 0x019E	; 0x80019e <__data_end>
 150:	30 91 9f 01 	lds	r19, 0x019F	; 0x80019f <__data_end+0x1>
 154:	2f 5f       	subi	r18, 0xFF	; 255
 156:	3f 4f       	sbci	r19, 0xFF	; 255
 158:	30 93 9f 01 	sts	0x019F, r19	; 0x80019f <__data_end+0x1>
 15c:	20 93 9e 01 	sts	0x019E, r18	; 0x80019e <__data_end>
 160:	ba cf       	rjmp	.-140    	; 0xd6 <_Z14uart_read_textPc+0x10>
				flag = true;
				i = 0;
			}
		}
	}
}
 162:	08 95       	ret

00000164 <_Z10uart_writec>:

void uart_write(char data)
{
	//Wait For Transmitter to become empty so its ready to receive new data
	while( !(UCSR0A & (1<<UDRE0)));
 164:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 168:	95 ff       	sbrs	r25, 5
 16a:	fc cf       	rjmp	.-8      	; 0x164 <_Z10uart_writec>
	//Now write
	UDR0=data;
 16c:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 170:	08 95       	ret

00000172 <_Z11uart_updatec>:
{
  uart_update(UDR0);
}

void uart_update(char data)
{
 172:	cf 93       	push	r28
 174:	c8 2f       	mov	r28, r24
	if (data != '\n' && flag)
 176:	8a 30       	cpi	r24, 0x0A	; 10
 178:	b9 f0       	breq	.+46     	; 0x1a8 <_Z11uart_updatec+0x36>
 17a:	80 91 3d 01 	lds	r24, 0x013D	; 0x80013d <flag>
 17e:	88 23       	and	r24, r24
 180:	99 f0       	breq	.+38     	; 0x1a8 <_Z11uart_updatec+0x36>
	{
		Buff[i] = data;
 182:	e0 91 a0 01 	lds	r30, 0x01A0	; 0x8001a0 <i>
 186:	f0 91 a1 01 	lds	r31, 0x01A1	; 0x8001a1 <i+0x1>
 18a:	ee 55       	subi	r30, 0x5E	; 94
 18c:	fe 4f       	sbci	r31, 0xFE	; 254
 18e:	c0 83       	st	Z, r28
		uart_write(Buff[i]);
 190:	8c 2f       	mov	r24, r28
 192:	0e 94 b2 00 	call	0x164	; 0x164 <_Z10uart_writec>
		i++;
 196:	80 91 a0 01 	lds	r24, 0x01A0	; 0x8001a0 <i>
 19a:	90 91 a1 01 	lds	r25, 0x01A1	; 0x8001a1 <i+0x1>
 19e:	01 96       	adiw	r24, 0x01	; 1
 1a0:	90 93 a1 01 	sts	0x01A1, r25	; 0x8001a1 <i+0x1>
 1a4:	80 93 a0 01 	sts	0x01A0, r24	; 0x8001a0 <i>
		
	}
	if (data == '\n')
 1a8:	ca 30       	cpi	r28, 0x0A	; 10
 1aa:	11 f4       	brne	.+4      	; 0x1b0 <_Z11uart_updatec+0x3e>
	{
		flag = false;
 1ac:	10 92 3d 01 	sts	0x013D, r1	; 0x80013d <flag>
	}
	
	
}
 1b0:	cf 91       	pop	r28
 1b2:	08 95       	ret

000001b4 <__vector_18>:
	

}

ISR(USART_RX_vect)
{
 1b4:	1f 92       	push	r1
 1b6:	0f 92       	push	r0
 1b8:	0f b6       	in	r0, 0x3f	; 63
 1ba:	0f 92       	push	r0
 1bc:	11 24       	eor	r1, r1
 1be:	2f 93       	push	r18
 1c0:	3f 93       	push	r19
 1c2:	4f 93       	push	r20
 1c4:	5f 93       	push	r21
 1c6:	6f 93       	push	r22
 1c8:	7f 93       	push	r23
 1ca:	8f 93       	push	r24
 1cc:	9f 93       	push	r25
 1ce:	af 93       	push	r26
 1d0:	bf 93       	push	r27
 1d2:	ef 93       	push	r30
 1d4:	ff 93       	push	r31
  uart_update(UDR0);
 1d6:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 1da:	0e 94 b9 00 	call	0x172	; 0x172 <_Z11uart_updatec>
}
 1de:	ff 91       	pop	r31
 1e0:	ef 91       	pop	r30
 1e2:	bf 91       	pop	r27
 1e4:	af 91       	pop	r26
 1e6:	9f 91       	pop	r25
 1e8:	8f 91       	pop	r24
 1ea:	7f 91       	pop	r23
 1ec:	6f 91       	pop	r22
 1ee:	5f 91       	pop	r21
 1f0:	4f 91       	pop	r20
 1f2:	3f 91       	pop	r19
 1f4:	2f 91       	pop	r18
 1f6:	0f 90       	pop	r0
 1f8:	0f be       	out	0x3f, r0	; 63
 1fa:	0f 90       	pop	r0
 1fc:	1f 90       	pop	r1
 1fe:	18 95       	reti

00000200 <_Z15uart_write_textPc>:
	//Now write
	UDR0=data;
}

void uart_write_text(char *str)
{
 200:	cf 93       	push	r28
 202:	df 93       	push	r29
 204:	ec 01       	movw	r28, r24
	while((*str)!='\0')
 206:	88 81       	ld	r24, Y
 208:	88 23       	and	r24, r24
 20a:	21 f0       	breq	.+8      	; 0x214 <_Z15uart_write_textPc+0x14>
	{
		uart_write(*str);
 20c:	0e 94 b2 00 	call	0x164	; 0x164 <_Z10uart_writec>
		str++;
 210:	21 96       	adiw	r28, 0x01	; 1
	UDR0=data;
}

void uart_write_text(char *str)
{
	while((*str)!='\0')
 212:	f9 cf       	rjmp	.-14     	; 0x206 <_Z15uart_write_textPc+0x6>
	{
		uart_write(*str);
		str++;
	}
}
 214:	df 91       	pop	r29
 216:	cf 91       	pop	r28
 218:	08 95       	ret

0000021a <main>:
char card2[] = "LED is OFF";
char card3[] = "FAN is ON";
char card4[] = "FAN is OFF";
char card5[] = "All appliances OFF";
int main(void)
{
 21a:	cf 93       	push	r28
 21c:	df 93       	push	r29
 21e:	cd b7       	in	r28, 0x3d	; 61
 220:	de b7       	in	r29, 0x3e	; 62
 222:	2f 97       	sbiw	r28, 0x0f	; 15
 224:	0f b6       	in	r0, 0x3f	; 63
 226:	f8 94       	cli
 228:	de bf       	out	0x3e, r29	; 62
 22a:	0f be       	out	0x3f, r0	; 63
 22c:	cd bf       	out	0x3d, r28	; 61
    /* Replace with your application code */
	char rxd[15] ="";
 22e:	1a 82       	std	Y+2, r1	; 0x02
 230:	19 82       	std	Y+1, r1	; 0x01
 232:	fe 01       	movw	r30, r28
 234:	33 96       	adiw	r30, 0x03	; 3
 236:	8d e0       	ldi	r24, 0x0D	; 13
 238:	df 01       	movw	r26, r30
 23a:	1d 92       	st	X+, r1
 23c:	8a 95       	dec	r24
 23e:	e9 f7       	brne	.-6      	; 0x23a <main+0x20>
	int i;
	int a = 352;
	uart_init();
 240:	0e 94 53 00 	call	0xa6	; 0xa6 <_Z9uart_initv>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 244:	bf ef       	ldi	r27, 0xFF	; 255
 246:	27 ea       	ldi	r18, 0xA7	; 167
 248:	81 e6       	ldi	r24, 0x61	; 97
 24a:	b1 50       	subi	r27, 0x01	; 1
 24c:	20 40       	sbci	r18, 0x00	; 0
 24e:	80 40       	sbci	r24, 0x00	; 0
 250:	e1 f7       	brne	.-8      	; 0x24a <main+0x30>
 252:	00 c0       	rjmp	.+0      	; 0x254 <main+0x3a>
 254:	00 00       	nop
	_delay_ms(2000);
	uart_write_text("Code Started\r\n");
 256:	8e e3       	ldi	r24, 0x3E	; 62
 258:	91 e0       	ldi	r25, 0x01	; 1
 25a:	0e 94 00 01 	call	0x200	; 0x200 <_Z15uart_write_textPc>
	uart_write(35);
 25e:	83 e2       	ldi	r24, 0x23	; 35
 260:	0e 94 b2 00 	call	0x164	; 0x164 <_Z10uart_writec>
	
	DDRB = 0xFF;
 264:	8f ef       	ldi	r24, 0xFF	; 255
 266:	84 b9       	out	0x04, r24	; 4
 268:	9f ef       	ldi	r25, 0xFF	; 255
 26a:	a3 ed       	ldi	r26, 0xD3	; 211
 26c:	b0 e3       	ldi	r27, 0x30	; 48
 26e:	91 50       	subi	r25, 0x01	; 1
 270:	a0 40       	sbci	r26, 0x00	; 0
 272:	b0 40       	sbci	r27, 0x00	; 0
 274:	e1 f7       	brne	.-8      	; 0x26e <main+0x54>
 276:	00 c0       	rjmp	.+0      	; 0x278 <main+0x5e>
 278:	00 00       	nop
	

    while (1) 
    {
		_delay_ms(1000);
		uart_read_text(rxd);
 27a:	ce 01       	movw	r24, r28
 27c:	01 96       	adiw	r24, 0x01	; 1
 27e:	0e 94 63 00 	call	0xc6	; 0xc6 <_Z14uart_read_textPc>
 		
		
		if(strcmp(rxd, card1) == 0)
 282:	63 e3       	ldi	r22, 0x33	; 51
 284:	71 e0       	ldi	r23, 0x01	; 1
 286:	ce 01       	movw	r24, r28
 288:	01 96       	adiw	r24, 0x01	; 1
 28a:	0e 94 90 01 	call	0x320	; 0x320 <strcmp>
 28e:	89 2b       	or	r24, r25
 290:	41 f4       	brne	.+16     	; 0x2a2 <main+0x88>
		{
			uart_write_text("\r\nLED is ON\r\n");
 292:	8d e4       	ldi	r24, 0x4D	; 77
 294:	91 e0       	ldi	r25, 0x01	; 1
 296:	0e 94 00 01 	call	0x200	; 0x200 <_Z15uart_write_textPc>
			PORTB |= (1<<1);
 29a:	85 b1       	in	r24, 0x05	; 5
 29c:	82 60       	ori	r24, 0x02	; 2
 29e:	85 b9       	out	0x05, r24	; 5
 2a0:	e3 cf       	rjmp	.-58     	; 0x268 <main+0x4e>
		}
		else if(strcmp(rxd, card2) == 0)
 2a2:	68 e2       	ldi	r22, 0x28	; 40
 2a4:	71 e0       	ldi	r23, 0x01	; 1
 2a6:	ce 01       	movw	r24, r28
 2a8:	01 96       	adiw	r24, 0x01	; 1
 2aa:	0e 94 90 01 	call	0x320	; 0x320 <strcmp>
 2ae:	89 2b       	or	r24, r25
 2b0:	41 f4       	brne	.+16     	; 0x2c2 <main+0xa8>
		{
			uart_write_text("\r\nLED is OFF\r\n");
 2b2:	8b e5       	ldi	r24, 0x5B	; 91
 2b4:	91 e0       	ldi	r25, 0x01	; 1
 2b6:	0e 94 00 01 	call	0x200	; 0x200 <_Z15uart_write_textPc>
				PORTB &= ~(1<<1);
 2ba:	85 b1       	in	r24, 0x05	; 5
 2bc:	8d 7f       	andi	r24, 0xFD	; 253
 2be:	85 b9       	out	0x05, r24	; 5
 2c0:	d3 cf       	rjmp	.-90     	; 0x268 <main+0x4e>
		}
		else if(strcmp(rxd, card3) == 0)
 2c2:	6e e1       	ldi	r22, 0x1E	; 30
 2c4:	71 e0       	ldi	r23, 0x01	; 1
 2c6:	ce 01       	movw	r24, r28
 2c8:	01 96       	adiw	r24, 0x01	; 1
 2ca:	0e 94 90 01 	call	0x320	; 0x320 <strcmp>
 2ce:	89 2b       	or	r24, r25
 2d0:	41 f4       	brne	.+16     	; 0x2e2 <main+0xc8>
		{
			uart_write_text("\r\nFAN is ON\r\n");
 2d2:	8a e6       	ldi	r24, 0x6A	; 106
 2d4:	91 e0       	ldi	r25, 0x01	; 1
 2d6:	0e 94 00 01 	call	0x200	; 0x200 <_Z15uart_write_textPc>
			PORTB |= (1<<2);
 2da:	85 b1       	in	r24, 0x05	; 5
 2dc:	84 60       	ori	r24, 0x04	; 4
 2de:	85 b9       	out	0x05, r24	; 5
 2e0:	c3 cf       	rjmp	.-122    	; 0x268 <main+0x4e>
		}
		else if(strcmp(rxd, card4) == 0)
 2e2:	63 e1       	ldi	r22, 0x13	; 19
 2e4:	71 e0       	ldi	r23, 0x01	; 1
 2e6:	ce 01       	movw	r24, r28
 2e8:	01 96       	adiw	r24, 0x01	; 1
 2ea:	0e 94 90 01 	call	0x320	; 0x320 <strcmp>
 2ee:	89 2b       	or	r24, r25
 2f0:	41 f4       	brne	.+16     	; 0x302 <main+0xe8>
		{
			uart_write_text("\r\nFAN is OFF\r\n");
 2f2:	88 e7       	ldi	r24, 0x78	; 120
 2f4:	91 e0       	ldi	r25, 0x01	; 1
 2f6:	0e 94 00 01 	call	0x200	; 0x200 <_Z15uart_write_textPc>
			PORTB &= ~(1<<2);
 2fa:	85 b1       	in	r24, 0x05	; 5
 2fc:	8b 7f       	andi	r24, 0xFB	; 251
 2fe:	85 b9       	out	0x05, r24	; 5
 300:	b3 cf       	rjmp	.-154    	; 0x268 <main+0x4e>
		}
		else if(strcmp(rxd, card5) == 0)
 302:	60 e0       	ldi	r22, 0x00	; 0
 304:	71 e0       	ldi	r23, 0x01	; 1
 306:	ce 01       	movw	r24, r28
 308:	01 96       	adiw	r24, 0x01	; 1
 30a:	0e 94 90 01 	call	0x320	; 0x320 <strcmp>
 30e:	89 2b       	or	r24, r25
 310:	09 f0       	breq	.+2      	; 0x314 <main+0xfa>
 312:	aa cf       	rjmp	.-172    	; 0x268 <main+0x4e>
		{
			uart_write_text("\r\nAll appliances OFF\r\n");
 314:	87 e8       	ldi	r24, 0x87	; 135
 316:	91 e0       	ldi	r25, 0x01	; 1
 318:	0e 94 00 01 	call	0x200	; 0x200 <_Z15uart_write_textPc>
			PORTB = 0x00;
 31c:	15 b8       	out	0x05, r1	; 5
 31e:	a4 cf       	rjmp	.-184    	; 0x268 <main+0x4e>

00000320 <strcmp>:
 320:	fb 01       	movw	r30, r22
 322:	dc 01       	movw	r26, r24
 324:	8d 91       	ld	r24, X+
 326:	01 90       	ld	r0, Z+
 328:	80 19       	sub	r24, r0
 32a:	01 10       	cpse	r0, r1
 32c:	d9 f3       	breq	.-10     	; 0x324 <strcmp+0x4>
 32e:	99 0b       	sbc	r25, r25
 330:	08 95       	ret

00000332 <_exit>:
 332:	f8 94       	cli

00000334 <__stop_program>:
 334:	ff cf       	rjmp	.-2      	; 0x334 <__stop_program>
