
LCD.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000188  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000010  00800060  00000188  000001fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000020c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000023c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000040  00000000  00000000  00000278  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000092b  00000000  00000000  000002b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000612  00000000  00000000  00000be3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000035d  00000000  00000000  000011f5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000070  00000000  00000000  00001554  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000339  00000000  00000000  000015c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000379  00000000  00000000  000018fd  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  00001c76  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 e8       	ldi	r30, 0x88	; 136
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 37       	cpi	r26, 0x70	; 112
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 b3 00 	call	0x166	; 0x166 <main>
  7a:	0c 94 c2 00 	jmp	0x184	; 0x184 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <lcd_cmd>:
#define lcdport PORTB


void lcd_cmd(unsigned char cmd)
{
	lcdport = cmd;
  82:	88 bb       	out	0x18, r24	; 24
	rs_low();
  84:	82 b3       	in	r24, 0x12	; 18
  86:	8b 7f       	andi	r24, 0xFB	; 251
  88:	82 bb       	out	0x12, r24	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  8a:	8f e3       	ldi	r24, 0x3F	; 63
  8c:	9f e1       	ldi	r25, 0x1F	; 31
  8e:	01 97       	sbiw	r24, 0x01	; 1
  90:	f1 f7       	brne	.-4      	; 0x8e <lcd_cmd+0xc>
  92:	00 c0       	rjmp	.+0      	; 0x94 <lcd_cmd+0x12>
  94:	00 00       	nop
	_delay_ms(2);
	en_high();
  96:	82 b3       	in	r24, 0x12	; 18
  98:	88 60       	ori	r24, 0x08	; 8
  9a:	82 bb       	out	0x12, r24	; 18
  9c:	8f e3       	ldi	r24, 0x3F	; 63
  9e:	9f e1       	ldi	r25, 0x1F	; 31
  a0:	01 97       	sbiw	r24, 0x01	; 1
  a2:	f1 f7       	brne	.-4      	; 0xa0 <lcd_cmd+0x1e>
  a4:	00 c0       	rjmp	.+0      	; 0xa6 <lcd_cmd+0x24>
  a6:	00 00       	nop
	_delay_ms(2);
	en_low();
  a8:	82 b3       	in	r24, 0x12	; 18
  aa:	87 7f       	andi	r24, 0xF7	; 247
  ac:	82 bb       	out	0x12, r24	; 18
  ae:	08 95       	ret

000000b0 <lcd_data>:
}

void lcd_data(unsigned char data)
{
	lcdport = data;
  b0:	88 bb       	out	0x18, r24	; 24
	rs_high();
  b2:	82 b3       	in	r24, 0x12	; 18
  b4:	84 60       	ori	r24, 0x04	; 4
  b6:	82 bb       	out	0x12, r24	; 18
  b8:	8f e3       	ldi	r24, 0x3F	; 63
  ba:	9f e1       	ldi	r25, 0x1F	; 31
  bc:	01 97       	sbiw	r24, 0x01	; 1
  be:	f1 f7       	brne	.-4      	; 0xbc <lcd_data+0xc>
  c0:	00 c0       	rjmp	.+0      	; 0xc2 <lcd_data+0x12>
  c2:	00 00       	nop
	_delay_ms(2);
	en_high();
  c4:	82 b3       	in	r24, 0x12	; 18
  c6:	88 60       	ori	r24, 0x08	; 8
  c8:	82 bb       	out	0x12, r24	; 18
  ca:	8f e3       	ldi	r24, 0x3F	; 63
  cc:	9f e1       	ldi	r25, 0x1F	; 31
  ce:	01 97       	sbiw	r24, 0x01	; 1
  d0:	f1 f7       	brne	.-4      	; 0xce <lcd_data+0x1e>
  d2:	00 c0       	rjmp	.+0      	; 0xd4 <lcd_data+0x24>
  d4:	00 00       	nop
	_delay_ms(2);
	en_low();
  d6:	82 b3       	in	r24, 0x12	; 18
  d8:	87 7f       	andi	r24, 0xF7	; 247
  da:	82 bb       	out	0x12, r24	; 18
  dc:	08 95       	ret

000000de <lcd_print>:
}

void lcd_print(char *printData)
{
  de:	cf 93       	push	r28
  e0:	df 93       	push	r29
  e2:	ec 01       	movw	r28, r24
	while(*printData)
  e4:	03 c0       	rjmp	.+6      	; 0xec <lcd_print+0xe>
	{
		lcd_data(*printData);
  e6:	0e 94 58 00 	call	0xb0	; 0xb0 <lcd_data>
		printData++;
  ea:	21 96       	adiw	r28, 0x01	; 1
	en_low();
}

void lcd_print(char *printData)
{
	while(*printData)
  ec:	88 81       	ld	r24, Y
  ee:	81 11       	cpse	r24, r1
  f0:	fa cf       	rjmp	.-12     	; 0xe6 <lcd_print+0x8>
	{
		lcd_data(*printData);
		printData++;
	}
}
  f2:	df 91       	pop	r29
  f4:	cf 91       	pop	r28
  f6:	08 95       	ret

000000f8 <lcd_init>:


void lcd_init()     //Function to prepare the LCD  and get it ready
{
	lcd_cmd(0x38);  // for _using 2 lines and 5X7 matrix of LCD
  f8:	88 e3       	ldi	r24, 0x38	; 56
  fa:	0e 94 41 00 	call	0x82	; 0x82 <lcd_cmd>
  fe:	8f e1       	ldi	r24, 0x1F	; 31
 100:	9e e4       	ldi	r25, 0x4E	; 78
 102:	01 97       	sbiw	r24, 0x01	; 1
 104:	f1 f7       	brne	.-4      	; 0x102 <lcd_init+0xa>
 106:	00 c0       	rjmp	.+0      	; 0x108 <lcd_init+0x10>
 108:	00 00       	nop
	_delay_ms(5);
	
	lcd_cmd(0x02);  //Return home
 10a:	82 e0       	ldi	r24, 0x02	; 2
 10c:	0e 94 41 00 	call	0x82	; 0x82 <lcd_cmd>
 110:	8f e1       	ldi	r24, 0x1F	; 31
 112:	9e e4       	ldi	r25, 0x4E	; 78
 114:	01 97       	sbiw	r24, 0x01	; 1
 116:	f1 f7       	brne	.-4      	; 0x114 <lcd_init+0x1c>
 118:	00 c0       	rjmp	.+0      	; 0x11a <lcd_init+0x22>
 11a:	00 00       	nop
	_delay_ms(5);
	
	lcd_cmd(0x01);  //Clear display screen
 11c:	81 e0       	ldi	r24, 0x01	; 1
 11e:	0e 94 41 00 	call	0x82	; 0x82 <lcd_cmd>
 122:	8f e1       	ldi	r24, 0x1F	; 31
 124:	9e e4       	ldi	r25, 0x4E	; 78
 126:	01 97       	sbiw	r24, 0x01	; 1
 128:	f1 f7       	brne	.-4      	; 0x126 <lcd_init+0x2e>
 12a:	00 c0       	rjmp	.+0      	; 0x12c <lcd_init+0x34>
 12c:	00 00       	nop
	_delay_ms(5);
	
	lcd_cmd(0x0C);  //Display ON, cursor OFF
 12e:	8c e0       	ldi	r24, 0x0C	; 12
 130:	0e 94 41 00 	call	0x82	; 0x82 <lcd_cmd>
 134:	8f e1       	ldi	r24, 0x1F	; 31
 136:	9e e4       	ldi	r25, 0x4E	; 78
 138:	01 97       	sbiw	r24, 0x01	; 1
 13a:	f1 f7       	brne	.-4      	; 0x138 <lcd_init+0x40>
 13c:	00 c0       	rjmp	.+0      	; 0x13e <lcd_init+0x46>
 13e:	00 00       	nop
	_delay_ms(5);
	
	lcd_cmd(0x06);  //Increment cursor (shift cursor to right)
 140:	86 e0       	ldi	r24, 0x06	; 6
 142:	0e 94 41 00 	call	0x82	; 0x82 <lcd_cmd>
 146:	8f e1       	ldi	r24, 0x1F	; 31
 148:	9e e4       	ldi	r25, 0x4E	; 78
 14a:	01 97       	sbiw	r24, 0x01	; 1
 14c:	f1 f7       	brne	.-4      	; 0x14a <lcd_init+0x52>
 14e:	00 c0       	rjmp	.+0      	; 0x150 <lcd_init+0x58>
 150:	00 00       	nop
	_delay_ms(5);
	
	lcd_cmd(0x80);  //Force cursor to the beginning of the first line
 152:	80 e8       	ldi	r24, 0x80	; 128
 154:	0e 94 41 00 	call	0x82	; 0x82 <lcd_cmd>
 158:	8f e1       	ldi	r24, 0x1F	; 31
 15a:	9e e4       	ldi	r25, 0x4E	; 78
 15c:	01 97       	sbiw	r24, 0x01	; 1
 15e:	f1 f7       	brne	.-4      	; 0x15c <lcd_init+0x64>
 160:	00 c0       	rjmp	.+0      	; 0x162 <lcd_init+0x6a>
 162:	00 00       	nop
 164:	08 95       	ret

00000166 <main>:
	
	
}
int main(void)
{
	DDRB = 0Xff;
 166:	8f ef       	ldi	r24, 0xFF	; 255
 168:	87 bb       	out	0x17, r24	; 23
	DDRD |= (1<<2);
 16a:	81 b3       	in	r24, 0x11	; 17
 16c:	84 60       	ori	r24, 0x04	; 4
 16e:	81 bb       	out	0x11, r24	; 17
	DDRD |= (1<<3);
 170:	81 b3       	in	r24, 0x11	; 17
 172:	88 60       	ori	r24, 0x08	; 8
 174:	81 bb       	out	0x11, r24	; 17
	
	lcd_init();
 176:	0e 94 7c 00 	call	0xf8	; 0xf8 <lcd_init>
	lcd_print("Welcome to AVR");
 17a:	80 e6       	ldi	r24, 0x60	; 96
 17c:	90 e0       	ldi	r25, 0x00	; 0
 17e:	0e 94 6f 00 	call	0xde	; 0xde <lcd_print>
 182:	ff cf       	rjmp	.-2      	; 0x182 <main+0x1c>

00000184 <_exit>:
 184:	f8 94       	cli

00000186 <__stop_program>:
 186:	ff cf       	rjmp	.-2      	; 0x186 <__stop_program>
