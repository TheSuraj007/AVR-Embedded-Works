
Task 2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000412  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000010  00800060  00000412  00000486  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000496  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000004c8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000050  00000000  00000000  00000504  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000b51  00000000  00000000  00000554  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000064b  00000000  00000000  000010a5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000004ec  00000000  00000000  000016f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000a4  00000000  00000000  00001bdc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000388  00000000  00000000  00001c80  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000066e  00000000  00000000  00002008  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000040  00000000  00000000  00002676  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 e1       	ldi	r30, 0x12	; 18
  68:	f4 e0       	ldi	r31, 0x04	; 4
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 37       	cpi	r26, 0x70	; 112
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 ab 01 	call	0x356	; 0x356 <main>
  7a:	0c 94 07 02 	jmp	0x40e	; 0x40e <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <lcd_cmd>:
#define lcdport PORTB

// function to write command on LCD
void lcd_cmd(unsigned char cmd)
{
	lcdport = cmd;
  82:	88 bb       	out	0x18, r24	; 24
	rs_low();		// rs = 0 to select the command register
  84:	82 b3       	in	r24, 0x12	; 18
  86:	8b 7f       	andi	r24, 0xFB	; 251
  88:	82 bb       	out	0x12, r24	; 18
	en_high();
  8a:	82 b3       	in	r24, 0x12	; 18
  8c:	88 60       	ori	r24, 0x08	; 8
  8e:	82 bb       	out	0x12, r24	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  90:	8f e9       	ldi	r24, 0x9F	; 159
  92:	9f e0       	ldi	r25, 0x0F	; 15
  94:	01 97       	sbiw	r24, 0x01	; 1
  96:	f1 f7       	brne	.-4      	; 0x94 <lcd_cmd+0x12>
  98:	00 c0       	rjmp	.+0      	; 0x9a <lcd_cmd+0x18>
  9a:	00 00       	nop
	_delay_ms(1);
	en_low();
  9c:	82 b3       	in	r24, 0x12	; 18
  9e:	87 7f       	andi	r24, 0xF7	; 247
  a0:	82 bb       	out	0x12, r24	; 18
  a2:	08 95       	ret

000000a4 <lcd_data>:
}

// function to write data on LCD
void lcd_data(unsigned char dat)
{
	lcdport = dat;
  a4:	88 bb       	out	0x18, r24	; 24
	rs_high();		// rs = 0 to select the command register
  a6:	82 b3       	in	r24, 0x12	; 18
  a8:	84 60       	ori	r24, 0x04	; 4
  aa:	82 bb       	out	0x12, r24	; 18
	en_high();
  ac:	82 b3       	in	r24, 0x12	; 18
  ae:	88 60       	ori	r24, 0x08	; 8
  b0:	82 bb       	out	0x12, r24	; 18
  b2:	8f e9       	ldi	r24, 0x9F	; 159
  b4:	9f e0       	ldi	r25, 0x0F	; 15
  b6:	01 97       	sbiw	r24, 0x01	; 1
  b8:	f1 f7       	brne	.-4      	; 0xb6 <lcd_data+0x12>
  ba:	00 c0       	rjmp	.+0      	; 0xbc <lcd_data+0x18>
  bc:	00 00       	nop
	_delay_ms(1);
	en_low();
  be:	82 b3       	in	r24, 0x12	; 18
  c0:	87 7f       	andi	r24, 0xF7	; 247
  c2:	82 bb       	out	0x12, r24	; 18
  c4:	08 95       	ret

000000c6 <lcd_init>:
}

void lcd_init()
{
	lcd_cmd(0x38); _delay_ms(5);
  c6:	88 e3       	ldi	r24, 0x38	; 56
  c8:	0e 94 41 00 	call	0x82	; 0x82 <lcd_cmd>
  cc:	8f e1       	ldi	r24, 0x1F	; 31
  ce:	9e e4       	ldi	r25, 0x4E	; 78
  d0:	01 97       	sbiw	r24, 0x01	; 1
  d2:	f1 f7       	brne	.-4      	; 0xd0 <lcd_init+0xa>
  d4:	00 c0       	rjmp	.+0      	; 0xd6 <lcd_init+0x10>
  d6:	00 00       	nop
	lcd_cmd(0x02); _delay_ms(5);
  d8:	82 e0       	ldi	r24, 0x02	; 2
  da:	0e 94 41 00 	call	0x82	; 0x82 <lcd_cmd>
  de:	8f e1       	ldi	r24, 0x1F	; 31
  e0:	9e e4       	ldi	r25, 0x4E	; 78
  e2:	01 97       	sbiw	r24, 0x01	; 1
  e4:	f1 f7       	brne	.-4      	; 0xe2 <lcd_init+0x1c>
  e6:	00 c0       	rjmp	.+0      	; 0xe8 <lcd_init+0x22>
  e8:	00 00       	nop
	lcd_cmd(0x01); _delay_ms(5);
  ea:	81 e0       	ldi	r24, 0x01	; 1
  ec:	0e 94 41 00 	call	0x82	; 0x82 <lcd_cmd>
  f0:	8f e1       	ldi	r24, 0x1F	; 31
  f2:	9e e4       	ldi	r25, 0x4E	; 78
  f4:	01 97       	sbiw	r24, 0x01	; 1
  f6:	f1 f7       	brne	.-4      	; 0xf4 <lcd_init+0x2e>
  f8:	00 c0       	rjmp	.+0      	; 0xfa <lcd_init+0x34>
  fa:	00 00       	nop
	lcd_cmd(0x0C); _delay_ms(5);
  fc:	8c e0       	ldi	r24, 0x0C	; 12
  fe:	0e 94 41 00 	call	0x82	; 0x82 <lcd_cmd>
 102:	8f e1       	ldi	r24, 0x1F	; 31
 104:	9e e4       	ldi	r25, 0x4E	; 78
 106:	01 97       	sbiw	r24, 0x01	; 1
 108:	f1 f7       	brne	.-4      	; 0x106 <lcd_init+0x40>
 10a:	00 c0       	rjmp	.+0      	; 0x10c <lcd_init+0x46>
 10c:	00 00       	nop
	lcd_cmd(0x06); _delay_ms(5);
 10e:	86 e0       	ldi	r24, 0x06	; 6
 110:	0e 94 41 00 	call	0x82	; 0x82 <lcd_cmd>
 114:	8f e1       	ldi	r24, 0x1F	; 31
 116:	9e e4       	ldi	r25, 0x4E	; 78
 118:	01 97       	sbiw	r24, 0x01	; 1
 11a:	f1 f7       	brne	.-4      	; 0x118 <lcd_init+0x52>
 11c:	00 c0       	rjmp	.+0      	; 0x11e <lcd_init+0x58>
 11e:	00 00       	nop
	lcd_cmd(0x80); _delay_ms(5);
 120:	80 e8       	ldi	r24, 0x80	; 128
 122:	0e 94 41 00 	call	0x82	; 0x82 <lcd_cmd>
 126:	8f e1       	ldi	r24, 0x1F	; 31
 128:	9e e4       	ldi	r25, 0x4E	; 78
 12a:	01 97       	sbiw	r24, 0x01	; 1
 12c:	f1 f7       	brne	.-4      	; 0x12a <lcd_init+0x64>
 12e:	00 c0       	rjmp	.+0      	; 0x130 <lcd_init+0x6a>
 130:	00 00       	nop
 132:	08 95       	ret

00000134 <cursorxy>:
}

void cursorxy(char x, char y)
{
	if( ( x < 1 || x > 2) || (y < 1 || y > 16) )
 134:	9f ef       	ldi	r25, 0xFF	; 255
 136:	98 0f       	add	r25, r24
 138:	92 30       	cpi	r25, 0x02	; 2
 13a:	28 f4       	brcc	.+10     	; 0x146 <cursorxy+0x12>
 13c:	9f ef       	ldi	r25, 0xFF	; 255
 13e:	96 0f       	add	r25, r22
 140:	90 31       	cpi	r25, 0x10	; 16
 142:	20 f4       	brcc	.+8      	; 0x14c <cursorxy+0x18>
 144:	05 c0       	rjmp	.+10     	; 0x150 <cursorxy+0x1c>
	{
		x = 1;
		y = 1;
 146:	61 e0       	ldi	r22, 0x01	; 1

void cursorxy(char x, char y)
{
	if( ( x < 1 || x > 2) || (y < 1 || y > 16) )
	{
		x = 1;
 148:	81 e0       	ldi	r24, 0x01	; 1
 14a:	02 c0       	rjmp	.+4      	; 0x150 <cursorxy+0x1c>
		y = 1;
 14c:	61 e0       	ldi	r22, 0x01	; 1

void cursorxy(char x, char y)
{
	if( ( x < 1 || x > 2) || (y < 1 || y > 16) )
	{
		x = 1;
 14e:	81 e0       	ldi	r24, 0x01	; 1
		y = 1;
	}
	if(x == 1)
 150:	81 30       	cpi	r24, 0x01	; 1
 152:	29 f4       	brne	.+10     	; 0x15e <cursorxy+0x2a>
	lcd_cmd(0x7F+y);
 154:	8f e7       	ldi	r24, 0x7F	; 127
 156:	86 0f       	add	r24, r22
 158:	0e 94 41 00 	call	0x82	; 0x82 <lcd_cmd>
 15c:	08 95       	ret
	else
	lcd_cmd(0xBF+y);
 15e:	8f eb       	ldi	r24, 0xBF	; 191
 160:	86 0f       	add	r24, r22
 162:	0e 94 41 00 	call	0x82	; 0x82 <lcd_cmd>
 166:	08 95       	ret

00000168 <lcd_print>:
}
//function to print any input value upto the desired digit on lcd
void lcd_print(char row, char coloumn, unsigned int value, int digits)
{
 168:	0f 93       	push	r16
 16a:	1f 93       	push	r17
 16c:	cf 93       	push	r28
 16e:	df 93       	push	r29
 170:	8a 01       	movw	r16, r20
 172:	e9 01       	movw	r28, r18
	unsigned int million;
	
	unsigned char flag=0;
	
	
	if(row==0||coloumn==0)
 174:	88 23       	and	r24, r24
 176:	11 f0       	breq	.+4      	; 0x17c <lcd_print+0x14>
 178:	61 11       	cpse	r22, r1
 17a:	05 c0       	rjmp	.+10     	; 0x186 <lcd_print+0x1e>
	{
		cursorxy(1,1);
 17c:	61 e0       	ldi	r22, 0x01	; 1
 17e:	81 e0       	ldi	r24, 0x01	; 1
 180:	0e 94 9a 00 	call	0x134	; 0x134 <cursorxy>
 184:	02 c0       	rjmp	.+4      	; 0x18a <lcd_print+0x22>
	}
	else
	{
		cursorxy(row,coloumn);
 186:	0e 94 9a 00 	call	0x134	; 0x134 <cursorxy>
	}
	if(digits==5 || flag==1)
 18a:	c5 30       	cpi	r28, 0x05	; 5
 18c:	d1 05       	cpc	r29, r1
 18e:	b1 f4       	brne	.+44     	; 0x1bc <lcd_print+0x54>
	{
		million=value/10000+48;
 190:	98 01       	movw	r18, r16
 192:	32 95       	swap	r19
 194:	22 95       	swap	r18
 196:	2f 70       	andi	r18, 0x0F	; 15
 198:	23 27       	eor	r18, r19
 19a:	3f 70       	andi	r19, 0x0F	; 15
 19c:	23 27       	eor	r18, r19
 19e:	a7 e4       	ldi	r26, 0x47	; 71
 1a0:	b3 e0       	ldi	r27, 0x03	; 3
 1a2:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <__umulhisi3>
 1a6:	96 95       	lsr	r25
 1a8:	87 95       	ror	r24
 1aa:	96 95       	lsr	r25
 1ac:	87 95       	ror	r24
 1ae:	96 95       	lsr	r25
 1b0:	87 95       	ror	r24
		lcd_data(million);
 1b2:	80 5d       	subi	r24, 0xD0	; 208
 1b4:	0e 94 52 00 	call	0xa4	; 0xa4 <lcd_data>
		flag=1;
 1b8:	81 e0       	ldi	r24, 0x01	; 1
 1ba:	01 c0       	rjmp	.+2      	; 0x1be <lcd_print+0x56>
	unsigned int tens;
	unsigned int hundred;
	unsigned int thousand;
	unsigned int million;
	
	unsigned char flag=0;
 1bc:	80 e0       	ldi	r24, 0x00	; 0
	{
		million=value/10000+48;
		lcd_data(million);
		flag=1;
	}
	if(digits==4 || flag==1)
 1be:	c4 30       	cpi	r28, 0x04	; 4
 1c0:	d1 05       	cpc	r29, r1
 1c2:	11 f0       	breq	.+4      	; 0x1c8 <lcd_print+0x60>
 1c4:	81 30       	cpi	r24, 0x01	; 1
 1c6:	81 f5       	brne	.+96     	; 0x228 <lcd_print+0xc0>
	{
		temp = value/1000;
 1c8:	98 01       	movw	r18, r16
 1ca:	36 95       	lsr	r19
 1cc:	27 95       	ror	r18
 1ce:	36 95       	lsr	r19
 1d0:	27 95       	ror	r18
 1d2:	36 95       	lsr	r19
 1d4:	27 95       	ror	r18
 1d6:	a5 ec       	ldi	r26, 0xC5	; 197
 1d8:	b0 e2       	ldi	r27, 0x20	; 32
 1da:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <__umulhisi3>
 1de:	ac 01       	movw	r20, r24
 1e0:	52 95       	swap	r21
 1e2:	42 95       	swap	r20
 1e4:	4f 70       	andi	r20, 0x0F	; 15
 1e6:	45 27       	eor	r20, r21
 1e8:	5f 70       	andi	r21, 0x0F	; 15
 1ea:	45 27       	eor	r20, r21
		thousand = temp%10 + 48;
 1ec:	9a 01       	movw	r18, r20
 1ee:	ad ec       	ldi	r26, 0xCD	; 205
 1f0:	bc ec       	ldi	r27, 0xCC	; 204
 1f2:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <__umulhisi3>
 1f6:	96 95       	lsr	r25
 1f8:	87 95       	ror	r24
 1fa:	96 95       	lsr	r25
 1fc:	87 95       	ror	r24
 1fe:	96 95       	lsr	r25
 200:	87 95       	ror	r24
 202:	9c 01       	movw	r18, r24
 204:	22 0f       	add	r18, r18
 206:	33 1f       	adc	r19, r19
 208:	88 0f       	add	r24, r24
 20a:	99 1f       	adc	r25, r25
 20c:	88 0f       	add	r24, r24
 20e:	99 1f       	adc	r25, r25
 210:	88 0f       	add	r24, r24
 212:	99 1f       	adc	r25, r25
 214:	82 0f       	add	r24, r18
 216:	93 1f       	adc	r25, r19
 218:	9a 01       	movw	r18, r20
 21a:	28 1b       	sub	r18, r24
 21c:	39 0b       	sbc	r19, r25
 21e:	c9 01       	movw	r24, r18
		lcd_data(thousand);
 220:	80 5d       	subi	r24, 0xD0	; 208
 222:	0e 94 52 00 	call	0xa4	; 0xa4 <lcd_data>
		flag=1;
 226:	81 e0       	ldi	r24, 0x01	; 1
	}
	if(digits==3 || flag==1)
 228:	c3 30       	cpi	r28, 0x03	; 3
 22a:	d1 05       	cpc	r29, r1
 22c:	11 f0       	breq	.+4      	; 0x232 <lcd_print+0xca>
 22e:	81 30       	cpi	r24, 0x01	; 1
 230:	51 f5       	brne	.+84     	; 0x286 <lcd_print+0x11e>
	{
		temp = value/100;
 232:	98 01       	movw	r18, r16
 234:	36 95       	lsr	r19
 236:	27 95       	ror	r18
 238:	36 95       	lsr	r19
 23a:	27 95       	ror	r18
 23c:	ab e7       	ldi	r26, 0x7B	; 123
 23e:	b4 e1       	ldi	r27, 0x14	; 20
 240:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <__umulhisi3>
 244:	ac 01       	movw	r20, r24
 246:	56 95       	lsr	r21
 248:	47 95       	ror	r20
		hundred = temp%10 + 48;
 24a:	9a 01       	movw	r18, r20
 24c:	ad ec       	ldi	r26, 0xCD	; 205
 24e:	bc ec       	ldi	r27, 0xCC	; 204
 250:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <__umulhisi3>
 254:	96 95       	lsr	r25
 256:	87 95       	ror	r24
 258:	96 95       	lsr	r25
 25a:	87 95       	ror	r24
 25c:	96 95       	lsr	r25
 25e:	87 95       	ror	r24
 260:	9c 01       	movw	r18, r24
 262:	22 0f       	add	r18, r18
 264:	33 1f       	adc	r19, r19
 266:	88 0f       	add	r24, r24
 268:	99 1f       	adc	r25, r25
 26a:	88 0f       	add	r24, r24
 26c:	99 1f       	adc	r25, r25
 26e:	88 0f       	add	r24, r24
 270:	99 1f       	adc	r25, r25
 272:	82 0f       	add	r24, r18
 274:	93 1f       	adc	r25, r19
 276:	9a 01       	movw	r18, r20
 278:	28 1b       	sub	r18, r24
 27a:	39 0b       	sbc	r19, r25
 27c:	c9 01       	movw	r24, r18
		lcd_data(hundred);
 27e:	80 5d       	subi	r24, 0xD0	; 208
 280:	0e 94 52 00 	call	0xa4	; 0xa4 <lcd_data>
		flag=1;
 284:	81 e0       	ldi	r24, 0x01	; 1
	}
	if(digits==2 || flag==1)
 286:	c2 30       	cpi	r28, 0x02	; 2
 288:	d1 05       	cpc	r29, r1
 28a:	11 f0       	breq	.+4      	; 0x290 <lcd_print+0x128>
 28c:	81 30       	cpi	r24, 0x01	; 1
 28e:	41 f5       	brne	.+80     	; 0x2e0 <lcd_print+0x178>
	{
		temp = value/10;
 290:	98 01       	movw	r18, r16
 292:	ad ec       	ldi	r26, 0xCD	; 205
 294:	bc ec       	ldi	r27, 0xCC	; 204
 296:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <__umulhisi3>
 29a:	ac 01       	movw	r20, r24
 29c:	56 95       	lsr	r21
 29e:	47 95       	ror	r20
 2a0:	56 95       	lsr	r21
 2a2:	47 95       	ror	r20
 2a4:	56 95       	lsr	r21
 2a6:	47 95       	ror	r20
		tens = temp%10 + 48;
 2a8:	9a 01       	movw	r18, r20
 2aa:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <__umulhisi3>
 2ae:	96 95       	lsr	r25
 2b0:	87 95       	ror	r24
 2b2:	96 95       	lsr	r25
 2b4:	87 95       	ror	r24
 2b6:	96 95       	lsr	r25
 2b8:	87 95       	ror	r24
 2ba:	9c 01       	movw	r18, r24
 2bc:	22 0f       	add	r18, r18
 2be:	33 1f       	adc	r19, r19
 2c0:	88 0f       	add	r24, r24
 2c2:	99 1f       	adc	r25, r25
 2c4:	88 0f       	add	r24, r24
 2c6:	99 1f       	adc	r25, r25
 2c8:	88 0f       	add	r24, r24
 2ca:	99 1f       	adc	r25, r25
 2cc:	82 0f       	add	r24, r18
 2ce:	93 1f       	adc	r25, r19
 2d0:	9a 01       	movw	r18, r20
 2d2:	28 1b       	sub	r18, r24
 2d4:	39 0b       	sbc	r19, r25
 2d6:	c9 01       	movw	r24, r18
		lcd_data(tens);
 2d8:	80 5d       	subi	r24, 0xD0	; 208
 2da:	0e 94 52 00 	call	0xa4	; 0xa4 <lcd_data>
		flag=1;
 2de:	81 e0       	ldi	r24, 0x01	; 1
	}
	if(digits==1 || flag==1)
 2e0:	c1 30       	cpi	r28, 0x01	; 1
 2e2:	d1 05       	cpc	r29, r1
 2e4:	11 f0       	breq	.+4      	; 0x2ea <lcd_print+0x182>
 2e6:	81 30       	cpi	r24, 0x01	; 1
 2e8:	e9 f4       	brne	.+58     	; 0x324 <lcd_print+0x1bc>
	{
		unit = value%10 + 48;
 2ea:	98 01       	movw	r18, r16
 2ec:	ad ec       	ldi	r26, 0xCD	; 205
 2ee:	bc ec       	ldi	r27, 0xCC	; 204
 2f0:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <__umulhisi3>
 2f4:	96 95       	lsr	r25
 2f6:	87 95       	ror	r24
 2f8:	96 95       	lsr	r25
 2fa:	87 95       	ror	r24
 2fc:	96 95       	lsr	r25
 2fe:	87 95       	ror	r24
 300:	9c 01       	movw	r18, r24
 302:	22 0f       	add	r18, r18
 304:	33 1f       	adc	r19, r19
 306:	88 0f       	add	r24, r24
 308:	99 1f       	adc	r25, r25
 30a:	88 0f       	add	r24, r24
 30c:	99 1f       	adc	r25, r25
 30e:	88 0f       	add	r24, r24
 310:	99 1f       	adc	r25, r25
 312:	82 0f       	add	r24, r18
 314:	93 1f       	adc	r25, r19
 316:	98 01       	movw	r18, r16
 318:	28 1b       	sub	r18, r24
 31a:	39 0b       	sbc	r19, r25
 31c:	c9 01       	movw	r24, r18
		lcd_data(unit);
 31e:	80 5d       	subi	r24, 0xD0	; 208
 320:	0e 94 52 00 	call	0xa4	; 0xa4 <lcd_data>
	}
	if(digits>5)
 324:	26 97       	sbiw	r28, 0x06	; 6
 326:	1c f0       	brlt	.+6      	; 0x32e <lcd_print+0x1c6>
	{
		lcd_data('e');
 328:	85 e6       	ldi	r24, 0x65	; 101
 32a:	0e 94 52 00 	call	0xa4	; 0xa4 <lcd_data>
	}
}
 32e:	df 91       	pop	r29
 330:	cf 91       	pop	r28
 332:	1f 91       	pop	r17
 334:	0f 91       	pop	r16
 336:	08 95       	ret

00000338 <lcd_out>:

void lcd_out(char x, char y, char *str)
{
 338:	cf 93       	push	r28
 33a:	df 93       	push	r29
 33c:	ea 01       	movw	r28, r20
	cursorxy(x,y);
 33e:	0e 94 9a 00 	call	0x134	; 0x134 <cursorxy>
	while(*str)
 342:	03 c0       	rjmp	.+6      	; 0x34a <lcd_out+0x12>
	{
		lcd_data(*str);
 344:	0e 94 52 00 	call	0xa4	; 0xa4 <lcd_data>
		str++;
 348:	21 96       	adiw	r28, 0x01	; 1
}

void lcd_out(char x, char y, char *str)
{
	cursorxy(x,y);
	while(*str)
 34a:	88 81       	ld	r24, Y
 34c:	81 11       	cpse	r24, r1
 34e:	fa cf       	rjmp	.-12     	; 0x344 <lcd_out+0xc>
	{
		lcd_data(*str);
		str++;
	}

}
 350:	df 91       	pop	r29
 352:	cf 91       	pop	r28
 354:	08 95       	ret

00000356 <main>:

int main(void)
{
	/* Replace with your application code */
	int a = 0;
	DDRB = 0xff; // 1111 1111
 356:	8f ef       	ldi	r24, 0xFF	; 255
 358:	87 bb       	out	0x17, r24	; 23
	DDRD |= (1 << 2);
 35a:	81 b3       	in	r24, 0x11	; 17
 35c:	84 60       	ori	r24, 0x04	; 4
 35e:	81 bb       	out	0x11, r24	; 17
	DDRD |= (1 << 3);
 360:	81 b3       	in	r24, 0x11	; 17
 362:	88 60       	ori	r24, 0x08	; 8
 364:	81 bb       	out	0x11, r24	; 17
	DDRD &= ~(1 << 4);
 366:	81 b3       	in	r24, 0x11	; 17
 368:	8f 7e       	andi	r24, 0xEF	; 239
 36a:	81 bb       	out	0x11, r24	; 17
	DDRD &= ~(1 << 5);
 36c:	81 b3       	in	r24, 0x11	; 17
 36e:	8f 7d       	andi	r24, 0xDF	; 223
 370:	81 bb       	out	0x11, r24	; 17
	
	PORTD |= (1<<4);   //PortD.4 Pull-UP
 372:	82 b3       	in	r24, 0x12	; 18
 374:	80 61       	ori	r24, 0x10	; 16
 376:	82 bb       	out	0x12, r24	; 18
	PORTD |= (1<<5);   //PortD.5 Pull-UP
 378:	82 b3       	in	r24, 0x12	; 18
 37a:	80 62       	ori	r24, 0x20	; 32
 37c:	82 bb       	out	0x12, r24	; 18
	
	lcd_init();
 37e:	0e 94 63 00 	call	0xc6	; 0xc6 <lcd_init>
	lcd_out(1,1,"UP-DOWN Counter");
 382:	40 e6       	ldi	r20, 0x60	; 96
 384:	50 e0       	ldi	r21, 0x00	; 0
 386:	61 e0       	ldi	r22, 0x01	; 1
 388:	81 e0       	ldi	r24, 0x01	; 1
 38a:	0e 94 9c 01 	call	0x338	; 0x338 <lcd_out>
	lcd_print(2,1,a,5);
 38e:	25 e0       	ldi	r18, 0x05	; 5
 390:	30 e0       	ldi	r19, 0x00	; 0
 392:	40 e0       	ldi	r20, 0x00	; 0
 394:	50 e0       	ldi	r21, 0x00	; 0
 396:	61 e0       	ldi	r22, 0x01	; 1
 398:	82 e0       	ldi	r24, 0x02	; 2
 39a:	0e 94 b4 00 	call	0x168	; 0x168 <lcd_print>
}

int main(void)
{
	/* Replace with your application code */
	int a = 0;
 39e:	c0 e0       	ldi	r28, 0x00	; 0
 3a0:	d0 e0       	ldi	r29, 0x00	; 0
	lcd_out(1,1,"UP-DOWN Counter");
	lcd_print(2,1,a,5);
	
	while (1)
	{
		if((PIND & 0x10) == 0)   //
 3a2:	84 99       	sbic	0x10, 4	; 16
 3a4:	11 c0       	rjmp	.+34     	; 0x3c8 <main+0x72>
		{
			a++;
 3a6:	21 96       	adiw	r28, 0x01	; 1
			lcd_print(2,1,a,5);
 3a8:	25 e0       	ldi	r18, 0x05	; 5
 3aa:	30 e0       	ldi	r19, 0x00	; 0
 3ac:	ae 01       	movw	r20, r28
 3ae:	61 e0       	ldi	r22, 0x01	; 1
 3b0:	82 e0       	ldi	r24, 0x02	; 2
 3b2:	0e 94 b4 00 	call	0x168	; 0x168 <lcd_print>
 3b6:	2f ef       	ldi	r18, 0xFF	; 255
 3b8:	83 ec       	ldi	r24, 0xC3	; 195
 3ba:	99 e0       	ldi	r25, 0x09	; 9
 3bc:	21 50       	subi	r18, 0x01	; 1
 3be:	80 40       	sbci	r24, 0x00	; 0
 3c0:	90 40       	sbci	r25, 0x00	; 0
 3c2:	e1 f7       	brne	.-8      	; 0x3bc <main+0x66>
 3c4:	00 c0       	rjmp	.+0      	; 0x3c6 <main+0x70>
 3c6:	00 00       	nop
			_delay_ms(200);
		}
		
		if((PIND & 0x20) == 0)   //
 3c8:	85 99       	sbic	0x10, 5	; 16
 3ca:	eb cf       	rjmp	.-42     	; 0x3a2 <main+0x4c>
		{
			a--;
 3cc:	21 97       	sbiw	r28, 0x01	; 1
			lcd_print(2,1,a,5);
 3ce:	25 e0       	ldi	r18, 0x05	; 5
 3d0:	30 e0       	ldi	r19, 0x00	; 0
 3d2:	ae 01       	movw	r20, r28
 3d4:	61 e0       	ldi	r22, 0x01	; 1
 3d6:	82 e0       	ldi	r24, 0x02	; 2
 3d8:	0e 94 b4 00 	call	0x168	; 0x168 <lcd_print>
 3dc:	2f ef       	ldi	r18, 0xFF	; 255
 3de:	83 ec       	ldi	r24, 0xC3	; 195
 3e0:	99 e0       	ldi	r25, 0x09	; 9
 3e2:	21 50       	subi	r18, 0x01	; 1
 3e4:	80 40       	sbci	r24, 0x00	; 0
 3e6:	90 40       	sbci	r25, 0x00	; 0
 3e8:	e1 f7       	brne	.-8      	; 0x3e2 <main+0x8c>
 3ea:	00 c0       	rjmp	.+0      	; 0x3ec <main+0x96>
 3ec:	00 00       	nop
 3ee:	d9 cf       	rjmp	.-78     	; 0x3a2 <main+0x4c>

000003f0 <__umulhisi3>:
 3f0:	a2 9f       	mul	r26, r18
 3f2:	b0 01       	movw	r22, r0
 3f4:	b3 9f       	mul	r27, r19
 3f6:	c0 01       	movw	r24, r0
 3f8:	a3 9f       	mul	r26, r19
 3fa:	70 0d       	add	r23, r0
 3fc:	81 1d       	adc	r24, r1
 3fe:	11 24       	eor	r1, r1
 400:	91 1d       	adc	r25, r1
 402:	b2 9f       	mul	r27, r18
 404:	70 0d       	add	r23, r0
 406:	81 1d       	adc	r24, r1
 408:	11 24       	eor	r1, r1
 40a:	91 1d       	adc	r25, r1
 40c:	08 95       	ret

0000040e <_exit>:
 40e:	f8 94       	cli

00000410 <__stop_program>:
 410:	ff cf       	rjmp	.-2      	; 0x410 <__stop_program>
